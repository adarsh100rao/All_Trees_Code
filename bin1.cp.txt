#include<bits/stdc++.h>
using namespace std;
class node{
    public:
    int data;
    node* left;
    node* right;
    node(int d){
        this -> data = d;
        this -> left = NULL;
        this -> right = NULL;

    }

};
node* buildtree(node* root){
    cout << "enter the root: " << '\n';
    int data;
    cin >> data;
    root  = new node(data);
    if(data == -1){
        return NULL;

    }
    
    cout << "enter data for inserting in left of  " << data <<'\n';
    root -> left = buildtree(root -> left);
    cout << "enter data for iinserting in right of " << data << '\n';
    root -> right = buildtree(root -> right);
    return root;
    
}
void levelorder(node* root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        if(temp == NULL){
            // purana level complete traverse hochuka h
            cout << '\n';
            if(!q.empty()){
                // queue has still some child nodes
                q.push(NULL);

            }
        }
        else{
            cout << temp -> data << " ";
            if(temp -> left){
                q.push(temp -> left);
            }
            if(temp -> right){
                q.push(temp -> right);

            }
        }

    }
}
void inorder(node* root){
    // base case
    if(root == NULL) return ;
    inorder(root -> left);
    cout << root -> data << " ";
    inorder(root -> right);

} 
void preorder(node* root){
    // base case
    if(root == NULL) return ;
    cout << root -> data << " ";
    preorder(root -> left);
    preorder(root -> right);

}  
void postorder(node* root){
    // base case
    if(root == NULL) return ;
    postorder(root -> left);
    postorder(root -> right);
    cout << root -> data << " ";
} 
void buildfromlevel(node* root){
    queue<node*> q;
    cout << "enter the data: " << '\n';
    int data;
    cin >> data;
    root  = new node(data);
    q.push(root);
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        cout << "enter the left root for: " << temp -> data << '\n';
        int leftdata;
        cin >> leftdata;
        if(leftdata != -1){
            temp -> left  = new node(leftdata);
            q.push(temp -> left);
        }
        cout << "enter the right root for: " << temp -> data << '\n';
        int rightdata;
        cin >> rightdata;
        if(rightdata != -1){
            temp -> right  = new node(rightdata);
            q.push(temp -> right);
        }
    }
}
int main(){
    node* root = NULL;
    //creating 
    root = buildtree(root);
    cout << "printing the inorder traversal :" << " ";
    inorder(root);
    cout << '\n';
    cout << "printing the preorder traversal :" << " ";
    preorder(root);
    cout << '\n';
    cout << "printing the postorder traversal :" << " ";
    postorder(root);
    buildfromlevel(root);
    levelorder(root);
    return 0;
}





FOR DIAMETER	of tree
class Solution {
  public:
    // Function to return the diameter of a Binary Tree.
    pair<int, int> diameterfast(Node* root){
        if(root == NULL){
            pair<int, int> p = make_pair(0, 0);
            return p;
        }
    
    pair<int, int> left = diameterfast(root -> left);
    pair<int, int> right = diameterfast(root -> right);
    int op1 = left.first;
    int op2 = right.first;
    int op3 = left.second + right.second + 1;
    pair<int, int> ans;
    ans.first = max(op1, max(op2, op3));
    ans.second = max(left.second , right.second)+1;
    return ans;
    }
    
    int diameter(Node* root) {
        // Your code here
        return diameterfast(root).first;
    }
};




HEIGHT OF TREE
class Solution{
    public:
    //Function to find the height of a binary tree.
    int height(struct Node* node){
        // code here 
        if(node == NULL) return 0;
        int left = height(node -> left);
        int right = height(node -> right);
        int ans = max(left, right) + 1;
        return ans;
    }
};